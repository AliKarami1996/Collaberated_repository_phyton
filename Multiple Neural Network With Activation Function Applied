import numpy as np


# Getting two inputs from the user

def relu(input_relu):
    return np.maximum(0, input_relu).astype(int)


input_data = np.array([eval(input("Enter the first input: ")), eval(input("Enter the second input: "))])

''' input_1 = eval(input("Enter the first input: "))
input_2 = eval(input("Enter the second input: "))

# Putting the inputs into an array

input_data = np.array([input_1, input_2])

# Defining relu (Activation Function)

relu = max(0, np.tanh(input_data))'''

# Getting the weights values from the user

weights = {
    'node_0_0': np.array([float(input("input_weight_0: ")), float(input("input_weight_1: "))]),
    'node_0_1': np.array([float(input("input_weight_2: ")), float(input("input_weight_3: "))]),
    'node_1_0': np.array([float(input("input_weight_4: ")), float(input("input_weight_5: "))]),
    'node_1_1': np.array([float(input("input_weight_6: ")), float(input("input_weight_7: "))]),
    'node_output': np.array([float(input("output_weight_0: ")), float(input("output_weight_1: "))])
}

# Calculating the First Hidden Layer values
node_0_0_value = (input_data * weights['node_0_0']).sum()
node_0_0_output = relu(node_0_0_value)

node_0_1_value = (input_data * weights['node_0_1']).sum()
node_0_1_output = relu(node_0_1_value)

# Putting the first hidden layer values into an array

hidden_layer_0 = np.array([node_0_0_output, node_0_1_output])
print(hidden_layer_0)

# Calculating the second hidden layer values with the values from the first hidden layer

node_1_0_value = (hidden_layer_0 * weights['node_1_0']).sum()
node_1_0_output = relu(node_1_0_value)

node_1_1_value = (hidden_layer_0 * weights['node_1_1']).sum()
node_1_1_output = relu(node_1_1_value)

# Putting the second hidden layer values into an array

hidden_layer_1 = np.array([node_1_0_output, node_1_1_output])
print(hidden_layer_1)

# Calculating the output

output_value = (hidden_layer_1 * weights['node_output']).sum()
output = relu(output_value)

print(output)
